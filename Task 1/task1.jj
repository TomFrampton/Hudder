// Lexer
PARSER_BEGIN(Hudder)

	class Hudder {
		public static void main(String[] args) throws ParseException, TokenMgrError {
			Hudder parser = new Hudder(System.in);
			parser.start();
		}
	}

PARSER_END(Hudder)

// Tokens for Lexical Analysis

SKIP : {" "} // Ignore whitespace
SKIP : {"\n" | "\r" | "\r\n"} // Ignore newlines
SKIP : {"|=.*=|"} // Ignore comments

TOKEN : {< EMPTY: "">}

// Keywords
TOKEN : {< FUN: "fun" >}
TOKEN : {< HANDBACK: "handback" >}
TOKEN : {< REPEAT: "repeat" >}
TOKEN : {< UNTIL: "until" >}
TOKEN : {< WHENEVER: "whenever" >}
TOKEN : {< DO: "do" >}
TOKEN : {< OTHERWISE: "otherwise" >}
TOKEN : {< START: "start" >}
TOKEN : {< STOP: "stop" >}
TOKEN : {< AND: "and" >}
TOKEN : {< OR: "or" >}
TOKEN : {< VAR: "var" >}
TOKEN : {< OUTPUT: "output" >}

TOKEN : {< IDENTIFIER: ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9","_"])* > }	
TOKEN : {< STRING : "\".*\"" >}

TOKEN : {< NUMBER: (["0"-"9"])+ >}

TOKEN : {< PLUS: "+" >}
TOKEN : {< MINUS: "-" >}
TOKEN : {< MULT: "*" >}
TOKEN : {< DIV: "/" >}
TOKEN : {< ASSIGNMENT: ":=" >}
TOKEN : {< EQUAL: "==">}
TOKEN : {< NOT_EQUAL: "!=" >}
TOKEN : {< GREATER: ">" >}
TOKEN : {< LESS: "<" >}
TOKEN : {< GREATER_EQUAL: ">=" >}
TOKEN : {< LESS_EQUAL: "<=" >}
TOKEN : {< O_PAR: "(" >}
TOKEN : {< C_PAR: ")" >}
TOKEN : {< COMMA: "'">}
TOKEN : {< SEMI_COLON: ";" >}


// Parser

void start() :
{}
{
	// No parser implemented for Task 1
}