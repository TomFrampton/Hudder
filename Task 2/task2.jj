// Lexer
PARSER_BEGIN(Hudder)
	
	import java.io.FileInputStream;
	import java.io.FileNotFoundException;

	class Hudder {
		public static void main(String[] args) throws ParseException, TokenMgrError, FileNotFoundException {
			Hudder parser = null;
			// If file name supplied use the file, otherwise use System.in
			if(args.length > 0) {
				parser = new Hudder(new FileInputStream("./Programs/" + args[0]));
			} else {
				parser = new Hudder(System.in);
			}

			parser.Hudder();
		}
	}

PARSER_END(Hudder)

// Tokens for Lexical Analysis

SKIP : {" "} // Ignore whitespace
SKIP : {"\n" | "\r" | "\r\n"} // Ignore newlines

// Ignore multi line comments
SKIP : { <"|=">: INSIDE_COMMENT }

<INSIDE_COMMENT>
SKIP: { <"=|">: DEFAULT | <~[]> }

// Keywords
TOKEN : {< FUN: "fun" >}
TOKEN : {< HANDBACK: "handback" >}
TOKEN : {< REPEAT: "repeat" >}
TOKEN : {< UNTIL: "until" >}
TOKEN : {< WHENEVER: "whenever" >}
TOKEN : {< DO: "do" >}
TOKEN : {< OTHERWISE: "otherwise" >}
TOKEN : {< START: "start" >}
TOKEN : {< STOP: "stop" >}
TOKEN : {< AND: "and" >}
TOKEN : {< OR: "or" >}
TOKEN : {< VAR: "var" >}
TOKEN : {< OUTPUT: "output" >}
// Not required in Task 1
TOKEN : {< IF: "if">}
TOKEN : {< THEN: "then">}
TOKEN : {< ELSE: "else">}
TOKEN : {< NOT : "!" >}

TOKEN : {< IDENTIFIER: ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9","_"])* > }	
TOKEN : {< STRING : "\".*\"" >}

TOKEN : {< NUMBER: (["0"-"9"])+ >}

TOKEN : {< PLUS: "+" >}
TOKEN : {< MINUS: "-" >}
TOKEN : {< MULT: "*" >}
TOKEN : {< DIV: "/" >}
TOKEN : {< ASSIGNMENT: ":=" >}
TOKEN : {< EQUAL: "==">}
TOKEN : {< NOT_EQUAL: "!=" >}
TOKEN : {< GREATER: ">" >}
TOKEN : {< LESS: "<" >}
TOKEN : {< GREATER_EQUAL: ">=" >}
TOKEN : {< LESS_EQUAL: "<=" >}
TOKEN : {< O_PAR: "(" >}
TOKEN : {< C_PAR: ")" >}
TOKEN : {< COMMA: ",">}
TOKEN : {< SEMI_COLON: ";" >}


// Parser

void Hudder() :
{}
{
	(FunctionDef())* MainProg() <EOF>
}

void MainProg() :
{}
{
	ProgBlock()
}

void FunctionDef() :
{}
{
	<FUN> <IDENTIFIER> <O_PAR> ParamList() <C_PAR> ProgBlock()
}

void ParamList() :
{}
{
	(<IDENTIFIER> (<COMMA> <IDENTIFIER>)*)?
}

void ProgBlock() :
{}
{
	<START> Statements() <STOP>
}

void Statements() :
{}
{
	(Statement() <SEMI_COLON>)*
}

void Statement() :
{}
{
	LOOKAHEAD(2) (<VAR>)? <IDENTIFIER> <ASSIGNMENT> Expression()
	| <IDENTIFIER> <O_PAR> ParamListCall() <C_PAR>
	| <OUTPUT> (Expression() | <STRING>)
	| <WHENEVER> Condition() <DO> Statements() (<OTHERWISE> Statements())? <STOP>
	| <IF> Condition() <THEN> Statement() <ELSE> Statement()
	| <REPEAT> ProgBlock() <UNTIL> <O_PAR> Condition() <C_PAR>
	| <HANDBACK> Expression()
}

void Expression() :
{}
{
	Term() ((<PLUS> | <MINUS>) Term())*
}

void Term() :
{}
{
	Factor() ((<MULT> | <DIV>) Factor())*
}

void Factor() :
{}
{
	<IDENTIFIER> | <NUMBER> | (<PLUS> | <MINUS>)? <O_PAR> Expression() <C_PAR>
}

void Condition() :
{}
{
	<NOT> Condition()
	| LOOKAHEAD(2) Expression() (<EQUAL> | <NOT_EQUAL> | <GREATER> | <LESS> | <GREATER_EQUAL> | <LESS_EQUAL>) Expression()
	| <O_PAR> Condition() (<AND> | <OR>) Condition() <C_PAR>
}

void ParamListCall() :
{}
{
	(Expression() (<COMMA> Expression())*)?
}
